# üé• Sistema de Streaming de C√¢mera - Instru√ß√µes Completas

## üìã Vis√£o Geral
Sistema que substitui o ngrok por conex√£o TCP/IP local, usando MQTT para descoberta autom√°tica de IP.

---

## üîß **PARA RASPBERRY PI (Servidor Principal)**

### 1. Prepara√ß√£o do Sistema
```bash
# Atualize o sistema
sudo apt update && sudo apt upgrade -y

# Instale Python e pip se n√£o estiverem instalados
sudo apt install python3 python3-pip -y

# Instale as depend√™ncias
pip3 install opencv-python flask flask-cors paho-mqtt numpy

# Para Raspberry Pi, pode precisar de:
sudo apt install python3-opencv -y
```

### 2. Configura√ß√£o da C√¢mera
```bash
# Ative a c√¢mera do Raspberry Pi
sudo raspi-config
# V√° em "Interfacing Options" > "Camera" > "Enable"

# Teste a c√¢mera
raspistill -o test.jpg

# Se usar c√¢mera USB, verifique se √© reconhecida
lsusb
```

### 3. Instala√ß√£o do Servidor
```bash
# Crie um diret√≥rio para o projeto
mkdir ~/camera_server
cd ~/camera_server

# Salve o c√≥digo Python como "servidor_raspberry.py"
# (copie o c√≥digo do primeiro artefato)

# Torne o arquivo execut√°vel
chmod +x servidor_raspberry.py
```

### 4. Execu√ß√£o
```bash
# Execute o servidor
python3 servidor_raspberry.py

# Ou execute em background
nohup python3 servidor_raspberry.py &

# Para parar (se rodando em background)
pkill -f servidor_raspberry.py
```

### 5. Auto-inicializa√ß√£o (Opcional)
```bash
# Crie um servi√ßo systemd
sudo nano /etc/systemd/system/camera-server.service
```

**Conte√∫do do arquivo:**
```ini
[Unit]
Description=Camera Server
After=network.target

[Service]
ExecStart=/usr/bin/python3 /home/pi/camera_server/servidor_raspberry.py
Restart=always
User=pi
Group=pi
Environment=PATH=/usr/bin:/usr/local/bin
Environment=PYTHONPATH=/usr/lib/python3/dist-packages

[Install]
WantedBy=multi-user.target
```

```bash
# Ative o servi√ßo
sudo systemctl daemon-reload
sudo systemctl enable camera-server
sudo systemctl start camera-server

# Verifique status
sudo systemctl status camera-server
```

---

## üíª **PARA PC (Testes)**

### 1. Instala√ß√£o Python (Windows/Mac/Linux)
```bash
# Windows: Baixe Python 3.8+ de python.org
# Mac: brew install python3
# Linux: sudo apt install python3 python3-pip

# Instale depend√™ncias
pip install opencv-python flask flask-cors paho-mqtt numpy
```

### 2. Execu√ß√£o
```bash
# Salve o c√≥digo como "servidor_pc.py"
# Execute:
python servidor_pc.py
```

---

## üì± **CONFIGURA√á√ÉO DO APP REACT NATIVE**

### 1. Substitua o arquivo Camera.tsx
- Substitua seu arquivo atual pelo c√≥digo do terceiro artefato
- Mant√©m compatibilidade com web e mobile

### 2. Depend√™ncias (se n√£o instaladas)
```bash
npm install @react-native-async-storage/async-storage
npm install react-native-webview
```

---

## üåê **CONFIGURA√á√ÉO DE REDE**

### 1. Descobrir IP Local
```bash
# Windows
ipconfig

# Mac/Linux
ifconfig
# ou
ip addr show
```

### 2. Teste de Conectividade
```bash
# Do seu celular/computador, teste:
# Substitua 192.168.1.XXX pelo IP do servidor
curl http://192.168.1.XXX:5000/status

# Ou abra no navegador:
http://192.168.1.XXX:5000/video
```

### 3. Firewall (Se necess√°rio)
```bash
# Windows - Permita porta 5000
# Linux/Raspberry Pi
sudo ufw allow 5000
```

---

## üöÄ **COMO USAR**

### 1. Iniciar o Sistema
1. **Execute o servidor** (Raspberry Pi ou PC)
   ```bash
   python3 servidor_raspberry.py
   # ou
   python servidor_pc.py
   ```

2. **Abra o app** React Native
   - O IP ser√° enviado automaticamente via MQTT
   - Aguarde alguns segundos para conex√£o

3. **Se n√£o conectar automaticamente:**
   - Toque em "Manual" no app
   - Digite o IP do servidor (ex: `192.168.1.100`)
   - Toque "Conectar"

### 2. Verificar Conex√£o
- O app mostra status do servidor
- Verde = funcionando, Vermelho = problema
- Pull-to-refresh para atualizar

### 3. Solu√ß√£o de Problemas

**Problema: "N√£o conecta"**
```bash
# Verifique se o servidor est√° rodando
ps aux | grep servidor

# Teste conex√£o local no servidor
curl http://localhost:5000/status

# Verifique firewall
sudo ufw status
```

**Problema: "C√¢mera n√£o funciona"**
```bash
# Teste c√¢mera diretamente
python3 -c "import cv2; print(cv2.VideoCapture(0).isOpened())"

# Para Raspberry Pi
vcgencmd get_camera

# Verifique permiss√µes
sudo usermod -a -G video $USER
```

**Problema: "MQTT n√£o conecta"**
- Verifique credenciais no c√≥digo
- Teste conex√£o internet
- Firewall pode bloquear porta 8883

---

## üìä **MONITORAMENTO**

### Ver Logs do Servidor
```bash
# Se rodando em primeiro plano, veja no terminal
# Se rodando como servi√ßo:
sudo journalctl -u camera-server -f

# Logs do sistema
tail -f /var/log/syslog | grep camera
```

### Endpoints √öteis
- `http://IP:5000/video` - Stream da c√¢mera
- `http://IP:5000/status` - Status do servidor
- `http://IP:5000/stop` - Para streaming
- `http://IP:5000/toggle_test` - Modo teste (s√≥ PC)

---

## üîß **PERSONALIZA√á√ÉO**

### Mudar Qualidade do V√≠deo
No c√≥digo Python, altere:
```python
# Resolu√ß√£o
camera.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)  # Era 640
camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)  # Era 480

# Qualidade JPEG
cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 95])  # Era 85
```

### Mudar Porta
```python
app.run(host='0.0.0.0', port=8080)  # Era 5000
```

### Configurar T√≥picos MQTT Diferentes
No c√≥digo, altere:
```python
MQTT_TOPIC_IP = "seu/topico/ip"
MQTT_TOPIC_REFRESH = "seu/topico/refresh"
```

---

## ‚úÖ **CHECKLIST DE FUNCIONAMENTO**

- [ ] Python 3.8+ instalado
- [ ] Depend√™ncias instaladas (opencv, flask, etc.)
- [ ] C√¢mera funcionando (teste separado)
- [ ] Servidor rodando (porta 5000 livre)
- [ ] Mesma rede Wi-Fi (servidor e app)
- [ ] Firewall liberado (porta 5000)
- [ ] MQTT conectando (internet funcionando)
- [ ] App React Native atualizado

---

## üÜò **SUPORTE**

Se tiver problemas:

1. **Verifique logs** dos servidores
2. **Teste conex√£o** com curl ou navegador
3. **Confirme rede** - mesmo Wi-Fi
4. **Teste MQTT** - conex√£o internet OK
5. **Reinicie** servidor e app

**IPs comuns de exemplo:**
- `192.168.1.XXX` (redes dom√©sticas)
- `192.168.0.XXX` (algumas redes)
- `10.0.0.XXX` (algumas redes corporativas)

O sistema agora funciona completamente local, sem necessidade do ngrok! üéâ